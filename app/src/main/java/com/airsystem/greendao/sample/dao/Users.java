package com.airsystem.greendao.sample.dao;

import com.airsystem.greendao.sample.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USERS.
 */
public class Users {

    private Long id;
    /** Not-null value. */
    private String username;
    /** Not-null value. */
    private String password;
    private long userdetailsid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UsersDao myDao;

    private UserDetails fkuserdetails;
    private Long fkuserdetails__resolvedKey;


    public Users() {
    }

    public Users(Long id) {
        this.id = id;
    }

    public Users(Long id, String username, String password, long userdetailsid) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.userdetailsid = userdetailsid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsersDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getUsername() {
        return username;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUsername(String username) {
        this.username = username;
    }

    /** Not-null value. */
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(String password) {
        this.password = password;
    }

    public long getUserdetailsid() {
        return userdetailsid;
    }

    public void setUserdetailsid(long userdetailsid) {
        this.userdetailsid = userdetailsid;
    }

    /** To-one relationship, resolved on first access. */
    public UserDetails getFkuserdetails() {
        long __key = this.userdetailsid;
        if (fkuserdetails__resolvedKey == null || !fkuserdetails__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDetailsDao targetDao = daoSession.getUserDetailsDao();
            UserDetails fkuserdetailsNew = targetDao.load(__key);
            synchronized (this) {
                fkuserdetails = fkuserdetailsNew;
            	fkuserdetails__resolvedKey = __key;
            }
        }
        return fkuserdetails;
    }

    public void setFkuserdetails(UserDetails fkuserdetails) {
        if (fkuserdetails == null) {
            throw new DaoException("To-one property 'userdetailsid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.fkuserdetails = fkuserdetails;
            userdetailsid = fkuserdetails.getId();
            fkuserdetails__resolvedKey = userdetailsid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
